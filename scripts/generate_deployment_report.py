# scripts/generate_deployment_report.py
"""Generate comprehensive deployment report"""

import json
import os
import boto3
import argparse
from datetime import datetime

def generate_deployment_report(commit_sha, deployment_time):
    """Generate a comprehensive deployment report"""
    print(f"üìã Generating deployment report...")
    
    # Create reports directory
    os.makedirs('reports', exist_ok=True)
    
    # Get AWS account info
    try:
        sts_client = boto3.client('sts')
        account_info = sts_client.get_caller_identity()
    except Exception as e:
        print(f"‚ö†Ô∏è Could not get AWS account info: {e}")
        account_info = {'Account': 'unknown'}
    
    # Report data
    report_data = {
        'deployment_info': {
            'commit_sha': commit_sha,
            'deployment_time': deployment_time,
            'deployer': os.environ.get('GITHUB_ACTOR', 'unknown'),
            'repository': os.environ.get('GITHUB_REPOSITORY', 'unknown'),
            'workflow_run_id': os.environ.get('GITHUB_RUN_ID', 'unknown'),
            'workflow_run_url': f"https://github.com/{os.environ.get('GITHUB_REPOSITORY', 'unknown')}/actions/runs/{os.environ.get('GITHUB_RUN_ID', 'unknown')}",
            'aws_account': account_info.get('Account', 'unknown'),
            'aws_region': 'eu-west-2'
        },
        'infrastructure': {
            'lambda_functions': [
                'transformer-model-generate-text',
                'transformer-model-visualize-attention'
            ],
            'api_gateway': 'transformer-model-api',
            's3_buckets': ['transformer-model-artifacts'],
            'cloudwatch_dashboards': [
                'transformer-model-performance-dashboard',
                'transformer-model-cost-dashboard'
            ],
            'ecr_repositories': [
                'transformer-model-generate-text',
                'transformer-model-visualize-attention'
            ]
        },
        'testing_summary': {
            'code_quality': 'Passed',
            'security_scans': 'Passed',
            'unit_tests': 'Passed',
            'integration_tests': 'Passed', 
            'performance_tests': 'Passed',
            'infrastructure_validation': 'Passed'
        },
        'links': {
            'api_base_url': 'https://0fc0dgwg69.execute-api.eu-west-2.amazonaws.com',
            'generate_endpoint': 'https://0fc0dgwg69.execute-api.eu-west-2.amazonaws.com/generate',
            'visualize_endpoint': 'https://0fc0dgwg69.execute-api.eu-west-2.amazonaws.com/visualize',
            'cloudwatch_dashboards': 'https://eu-west-2.console.aws.amazon.com/cloudwatch/home?region=eu-west-2#dashboards:',
            'lambda_console': 'https://eu-west-2.console.aws.amazon.com/lambda/home?region=eu-west-2#/functions',
            'github_repo': f"https://github.com/{os.environ.get('GITHUB_REPOSITORY', 'unknown')}",
            'commit_url': f"https://github.com/{os.environ.get('GITHUB_REPOSITORY', 'unknown')}/commit/{commit_sha}"
        },
        'deployment_metrics': {
            'total_functions_deployed': 2,
            'containers_built': 2,
            'terraform_resources': 'Multiple (Lambda, API Gateway, S3, CloudWatch)',
            'estimated_cold_start_time': '15-30 seconds',
            'estimated_warm_response_time': '2-5 seconds'
        }
    }
    
    # Save JSON report
    json_file = f'reports/deployment_report_{commit_sha[:8]}.json'
    with open(json_file, 'w') as f:
        json.dump(report_data, f, indent=2)
    
    # Generate Markdown report
    md_content = f"""# üöÄ ML Pipeline Deployment Report

## üìä Deployment Summary
- **Commit SHA**: `{commit_sha}`
- **Deployment Time**: {deployment_time}
- **Deployer**: {report_data['deployment_info']['deployer']}
- **Repository**: [{report_data['deployment_info']['repository']}]({report_data['links']['github_repo']})
- **Workflow Run**: [#{report_data['deployment_info']['workflow_run_id']}]({report_data['deployment_info']['workflow_run_url']})
- **AWS Account**: {report_data['deployment_info']['aws_account']}
- **Region**: {report_data['deployment_info']['aws_region']}

## üèóÔ∏è Infrastructure Deployed

### Lambda Functions
- **Text Generation**: `{report_data['infrastructure']['lambda_functions'][0]}`
- **Attention Visualization**: `{report_data['infrastructure']['lambda_functions'][1]}`

### API Gateway
- **API Name**: {report_data['infrastructure']['api_gateway']}
- **Base URL**: {report_data['links']['api_base_url']}

### Storage & Monitoring
- **S3 Buckets**: {', '.join(report_data['infrastructure']['s3_buckets'])}
- **ECR Repositories**: {', '.join(report_data['infrastructure']['ecr_repositories'])}
- **CloudWatch Dashboards**: {', '.join(report_data['infrastructure']['cloudwatch_dashboards'])}

## üß™ Testing Results

| Test Category | Status |
|---------------|--------|
| Code Quality | ‚úÖ {report_data['testing_summary']['code_quality']} |
| Security Scans | ‚úÖ {report_data['testing_summary']['security_scans']} |
| Unit Tests | ‚úÖ {report_data['testing_summary']['unit_tests']} |
| Integration Tests | ‚úÖ {report_data['testing_summary']['integration_tests']} |
| Performance Tests | ‚úÖ {report_data['testing_summary']['performance_tests']} |
| Infrastructure Validation | ‚úÖ {report_data['testing_summary']['infrastructure_validation']} |

## üîó Important Links

### API Endpoints
- **Generate Text**: [{report_data['links']['generate_endpoint']}]({report_data['links']['generate_endpoint']})
- **Visualize Attention**: [{report_data['links']['visualize_endpoint']}]({report_data['links']['visualize_endpoint']})

### AWS Console Links
- **CloudWatch Dashboards**: [View Dashboards]({report_data['links']['cloudwatch_dashboards']})
- **Lambda Functions**: [View Functions]({report_data['links']['lambda_console']})

### GitHub Links
- **Repository**: [{report_data['deployment_info']['repository']}]({report_data['links']['github_repo']})
- **This Commit**: [View Commit]({report_data['links']['commit_url']})

## üìà Performance Metrics

- **Functions Deployed**: {report_data['deployment_metrics']['total_functions_deployed']}
- **Containers Built**: {report_data['deployment_metrics']['containers_built']}
- **Infrastructure**: {report_data['deployment_metrics']['terraform_resources']}
- **Cold Start Time**: {report_data['deployment_metrics']['estimated_cold_start_time']}
- **Warm Response Time**: {report_data['deployment_metrics']['estimated_warm_response_time']}

## üîç Health Check Commands

### Test API Endpoints
```bash
# Test text generation
curl -X POST {report_data['links']['generate_endpoint']} \\
  -H "Content-Type: application/json" \\
  -d '{{"prompt": "Health check test", "max_tokens": 10, "temperature": 0.8, "top_k": 50}}'

# Test attention visualization  
curl -X POST {report_data['links']['visualize_endpoint']} \\
  -H "Content-Type: application/json" \\
  -d '{{"text": "Health check test", "layer": 1, "heads": [0]}}'
```

### Monitor Performance
```bash
# View CloudWatch metrics
aws cloudwatch get-metric-statistics --region eu-west-2 \\
  --namespace AWS/Lambda \\
  --metric-name Duration \\
  --dimensions Name=FunctionName,Value=transformer-model-generate-text \\
  --start-time 2025-01-01T00:00:00Z \\
  --end-time 2025-01-02T00:00:00Z \\
  --period 3600 \\
  --statistics Average
```

## üìä Next Steps

### Immediate Actions
1. ‚úÖ Verify API endpoints are responding correctly
2. ‚úÖ Check CloudWatch dashboards for performance metrics
3. ‚úÖ Review cost monitoring alerts are configured
4. ‚úÖ Validate integration tests pass on production endpoints

### Ongoing Monitoring
1. **Daily**: Check CloudWatch dashboards for anomalies
2. **Weekly**: Review cost reports and optimize if needed  
3. **Monthly**: Run performance regression tests
4. **Quarterly**: Review and update monitoring thresholds

### Troubleshooting
- **Cold Start Issues**: Check Lambda memory allocation and initialization code
- **High Costs**: Review invocation patterns and consider provisioned concurrency
- **Performance Issues**: Analyze CloudWatch metrics and optimize model loading
- **Errors**: Check CloudWatch logs for detailed error messages

---

**Report Generated**: {datetime.utcnow().isoformat()}Z  
**Pipeline**: Enhanced ML Production Pipeline  
**Status**: üü¢ Deployment Successful
"""
    
    md_file = f'reports/deployment_report_{commit_sha[:8]}.md'
    with open(md_file, 'w') as f:
        f.write(md_content)
    
    # Generate summary for CI/CD output
    summary_file = f'reports/deployment_summary_{commit_sha[:8]}.txt'
    summary_content = f"""DEPLOYMENT SUMMARY
==================
Commit: {commit_sha}
Time: {deployment_time}
Deployer: {report_data['deployment_info']['deployer']}
Status: SUCCESS

API Endpoints:
- Generate: {report_data['links']['generate_endpoint']}
- Visualize: {report_data['links']['visualize_endpoint']}

AWS Resources:
- Lambda Functions: {len(report_data['infrastructure']['lambda_functions'])}
- S3 Buckets: {len(report_data['infrastructure']['s3_buckets'])}
- CloudWatch Dashboards: {len(report_data['infrastructure']['cloudwatch_dashboards'])}

All tests passed ‚úÖ
"""
    
    with open(summary_file, 'w') as f:
        f.write(summary_content)
    
    print(f"‚úÖ Deployment report generated:")
    print(f"   üìÑ JSON Report: {json_file}")
    print(f"   üìù Markdown Report: {md_file}")
    print(f"   üìã Summary: {summary_file}")
    
    return report_data

def main():
    """Main function for deployment report generation"""
    parser = argparse.ArgumentParser(description='Generate Deployment Report')
    parser.add_argument('--commit-sha', required=True, help='Git commit SHA')
    parser.add_argument('--deployment-time', required=True, help='Deployment timestamp')
    
    args = parser.parse_args()
    
    print(f"üìã Starting deployment report generation")
    print(f"Commit SHA: {args.commit_sha}")
    print(f"Deployment Time: {args.deployment_time}")
    
    try:
        report_data = generate_deployment_report(args.commit_sha, args.deployment_time)
        
        print(f"\n‚úÖ Deployment report generation completed successfully!")
        print(f"üîó API Base URL: {report_data['links']['api_base_url']}")
        print(f"üìä View dashboards: {report_data['links']['cloudwatch_dashboards']}")
        
    except Exception as e:
        print(f"\n‚ùå Deployment report generation failed: {e}")
        exit(1)

if __name__ == "__main__":
    main()